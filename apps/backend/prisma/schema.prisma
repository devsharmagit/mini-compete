// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PARTICIPANT
  ORGANIZER
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(PARTICIPANT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  competitions  Competition[]  @relation("OrganizedCompetitions")
  registrations Registration[]
  mailbox       MailBox[]

  @@map("users")
}

model Competition {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  tags          String[]       @default([])
  capacity      Int
  regDeadline   DateTime
  startDate     DateTime?
  organizerId   Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  organizer     User           @relation("OrganizedCompetitions", fields: [organizerId], references: [id], onDelete: Cascade)
  registrations Registration[]

  @@index([organizerId])
  @@index([regDeadline])
  @@index([startDate])
  @@map("competitions")
}

model Registration {
  id            Int          @id @default(autoincrement())
  competitionId Int
  userId        Int
  createdAt     DateTime     @default(now())
  deletedAt     DateTime?
  
  competition   Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([competitionId, userId])
  @@index([userId])
  @@index([competitionId])
  @@index([deletedAt])
  @@map("registrations")
}

model MailBox {
  id        Int      @id @default(autoincrement())
  userId    Int
  to        String
  subject   String
  body      String
  sentAt    DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sentAt])
  @@map("mailbox")
}

model IdempotencyKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  response  Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@map("idempotency_keys")
}

model FailedJob {
  id         Int      @id @default(autoincrement())
  jobId      String
  jobName    String
  payload    Json
  error      String
  stackTrace String?
  attempts   Int
  createdAt  DateTime @default(now())

  @@index([jobId])
  @@index([createdAt])
  @@map("failed_jobs")
}

